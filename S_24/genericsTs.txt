Generics  => allow creating (TYPE VARIABLE) which can be used to create classes, functions & type aliases that don't need to explicitly define the types that they use.

Generics makes it easier to write reusable code.
--------------------------------------------------------------------------------------------------------------------------------------

"Generics with FUNCTIONS" => help make more generalized methods which more accurately represent the types used and returned.

Ex:

function createPair<S, T>(v1: S, v2: T): [S, T] {
  return [v1, v2];
}
console.log(createPair<string, number>('hello', 42)); // ['hello', 42]
--------------------------------------------------------------------------------------------------------------------------------------

"Generics with CLASSES" => used to create generalized classes.

Ex:

class NamedValue<T> {
  private _value: T | undefined;

  constructor(private name: string) {}

  public setValue(value: T) {
    this._value = value;
  }

  public getValue(): T | undefined {
    return this._value;
  }

  public toString(): string {
    return `${this.name}: ${this._value}`;
  }
}

let value = new NamedValue<number>('myNumber');
value.setValue(10);
console.log(value.toString()); // myNumber: 10

----------------------------------------------------------------------------------------------------------------------------------------

"Generics with TYPE ALIASES" => allow creating types that are more reusable.

Ex:

type Wrapped<T> = { value: T };

const wrappedValue: Wrapped<number> = { value: 10 };

----------------------------------------------------------------------------------------------------------------------------------------

"Generics with INTERFACES" =>This also works with interfaces

Ex: interface Wrapped<T> {}


-----------------------------------------------------------------------------------------------------------------------------------------

"DEFAULT VALUE in generics" => can be assigned default values which apply if no other value is specified or inferred.

Ex:

class NamedValue<T = string> {
  private _value: T | undefined;

  constructor(private name: string) {}

  public setValue(value: T) {
    this._value = value;
  }

  public getValue(): T | undefined {
    return this._value;
  }

  public toString(): string {
    return `${this.name}: ${this._value}`;
  }
}

let value = new NamedValue('myNumber');
value.setValue('myValue');
console.log(value.toString()); // myNumber: myValue


---------------------------------------------------------------------------------------------------------------------------

"EXTENDS in generics" => constraints can be added to generics to limit what's allowed. The constraints make it possible to rely on a more specific type when using the generic type.

Ex:

function createLoggedPair<S extends string | number, T extends string | number>(v1: S, v2: T): [S, T] {
  console.log(`creating pair: v1='${v1}', v2='${v2}'`);
  return [v1, v2];
}
---------------------------------------------------------------------------------------------------------------------------

Source: "w3schools.com"
