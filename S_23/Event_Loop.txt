1#What is the Event-loop?

1*The event loop is what allows Node.js to perform non-blocking I/O operations, despite the fact that JavaScript is single-threaded â€” by offloading operations to the system kernel whenever possible.


- most modern kernels are multi-threaded,so they can handle multiple operations executing in the background. 

-> with Node.js the kernel tell it when the operation complete then the callback function will be added to the poll queue to execute.


2# Explain what happen behind the scene => 

When Node.js starts, it initializes the Event-loop, it has some phases(operations) each phase has a FIFO queue of callbacks to execute.

start perform its operation for each phase ,then execute callbacks in that phase's queue .

"When the queue has been reached the limitation point" will move to the next phase and so on.
-------------------------------------------------------------------------------------------------------------
Phases => {
	*timers => execute callbacks scheduled by setTimeout() & setInterval().
	*pending callbacks: executes I/O callbacks deferred to the next loop iteration.
	*idle, prepare: only used internally.
	*poll: retrieve new I/O events; execute I/O related callbacks (almost all with the exception of close callbacks, the ones scheduled by timers, and 												setImmediate()); node will block here when appropriate.
	*check: setImmediate() callbacks are invoked here.
	*close callbacks: some close callbacks, e.g. socket.on('close', ...).
} 

"Between each run of the event loop, Node.js checks if it is waiting for any asynchronous I/O or timers and shuts down cleanly if there are not any."

Source: "nodejs.org"